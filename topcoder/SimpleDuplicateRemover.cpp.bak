// BEGIN CUT HERE
/*
// PROBLEM STATEMENT
// We have a sequence of integers. We want to remove duplicate elements from it.
You will be given a vector <int> sequence. For each element that occurs more than once leave only its rightmost occurrence. All unique elements must be copied without changes.


DEFINITION
Class:SimpleDuplicateRemover
Method:process
Parameters:vector <int>
Returns:vector <int>
Method signature:vector <int> process(vector <int> sequence)


CONSTRAINTS
-sequence will have between 1 and 50 elements, inclusive. 
-Each element of sequence will be between 1 and 1000, inclusive. 


EXAMPLES

0)
{1,5,5,1,6,1}

Returns: {5, 6, 1 }

We left the third 1, the second 2 and the only 6.

1)
{2,4,2,4,4}

Returns: {2, 4 }

2)
{6,6,6,6,6,6}

Returns: {6 }

3)
{1,2,3,4,2,2,3}

Returns: {1, 4, 2, 3 }

4)
{100,100,100,99,99,99,100,100,100}

Returns: {99, 100 }

*/
// END CUT HERE

#line 54 "SimpleDuplicateRemover.cpp"
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define SIZE(X) ((int)(X.size()))
#define REP(i, n) for(int i=0; i<(n); ++i)
#define FOR(i, l, h) for(int i=(l); i<=(h); ++i)
#define FORD(i, h, l) for(int i=(h); i>=(l);--i)
#define ALL(A) A.begin(),A.end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long LL;
typedef pair<int, int> PII;
class SimpleDuplicateRemover {
	public:
	vector <int> process(vector <int> sequence) {
		
	}
};
// BEGIN CUT HERE
int main() {
    SimpleDuplicateRemover __test;
    __test.run_test(-1);
    return 0;
}
// END CUT HERE

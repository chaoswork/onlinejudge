#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

template<class T> inline void ckmax(T &a,T b){if(b>a) a=b;}

#define MP(A,B) make_pair(A,B)
#define ALL(A) A.begin(),A.end()

#define PB push_back
#define SIZE(X) ((int)(X.size()))
#define REP(i, n) for(int i=0; i<(n); ++i)
#define FOR(i, l, h) for(int i=(l); i<=(h); ++i)
#define FORD(i, h, l) for(int i=(h); i>=(l);--i)
#define ALL(A) A.begin(),A.end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long LL;
typedef pair<int, int> PII;



bool search_two(const std::string &s, const std::string &flag1, const std::string &flag2) {
  size_t p1 = s.find(flag1);
  if (p1 == string::npos) return false;
  size_t p2 = s.find(flag2, p1 + flag1.size());
  if (p2 == string::npos) return false;
  return true;
}

std::string solve(std::string s, const std::string &flag1, const std::string &flag2) {
    // search two substring, non overlap
  bool forward = search_two(s, flag1, flag2);
  reverse(ALL(s));
  bool backward = search_two(s, flag1, flag2);
  if (forward) {
    if (backward) return "both";
    else return "forward";
  } else {
    if (backward) return "backward";
    else return "fantasy";
  }
  return "fantasy";
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::string a, b, c;
    std::cin >> a >> b >> c;
    auto ans = solve(a, b, c);
    std::cout << ans << '\n';
    return 0;
}
